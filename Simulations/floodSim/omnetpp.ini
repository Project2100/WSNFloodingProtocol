# @file FloodApp.ned
# @author Andrea Proietto
# @date 2019-08-01

[General]

# =============================================
# Always include the main Castalia.ini file
# =============================================
include ../Parameters/Castalia.ini


sim-time-limit = 100s

SN.field_x = 200	# meters
SN.field_y = 200	# meters

# These tests include 3 nodes each, coordinates will be specified manually
SN.numNodes = 6

# important wireless channel switch to allow mobility
SN.wirelessChannel.onlyStaticNodes = true
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0

# Choose a radio and set the Tx power to a low value so
# that node's mobility has a better effect on connectivity
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"
SN.node[*].Communication.Radio.TxOutputPower = "-5dBm"


# These tests use big packets (2kb) to show interference clearly
# This requires to set the max pkt size in all communication layers
SN.node[*].Communication.RoutingProtocolName = "FloodRouting"
SN.node[*].Communication.Routing.maxNetFrameSize = 2500

SN.node[*].Communication.MACProtocolName = "TunableMAC"
SN.node[*].Communication.MAC.macMaxPacketSize = 2500

SN.node[*].Communication.Radio.maxPhyFrameSize = 2500

# Throughput test application is used to send 2000-byte
# packets to node 0 (which by default is the receiving 
# node for this app).5 packets per second will be send 
SN.node[*].ApplicationName = "FloodApp"
#SN.node[*].Application.packetSpacing = 50
SN.node[*].Application.constantDataPayload = 2000
# application's trace info for node 0 (receiving node)
# is turned on, to show some interesting patterns
SN.node[0].Application.collectTraceInfo = true

#SN.node[1].Application.startupDelay = 2

# Nodes are moving, so seeing their location may be useful
# SN.node[*].MobilityManager.collectTraceInfo = true

# ==========================================================
# The default configuration sets node 0 to be mobile, while 
# sending nodes 1 and 2 are static. Receiving node 0 will 
# move in diagonal pattern, allowing it to receive packets 
# from node 1 and some time later from node 2. This will be
# clearly seen on the trace file and the collected output.
# ==========================================================

SN.node[*].xCoor = 50

SN.node[0].yCoor = 0
SN.node[1].yCoor = 10
SN.node[2].yCoor = 20
SN.node[3].yCoor = 30
SN.node[4].yCoor = 40

SN.node[5].yCoor = 60
SN.node[5].yCoor = 0


SN.node[0].Application.startupDelay = 5
SN.node[1].Application.startupDelay = 10
SN.node[2].Application.startupDelay = 15
SN.node[3].Application.startupDelay = 20
SN.node[4].Application.startupDelay = 25
SN.node[5].Application.startupDelay = 30


# SN.node[0].MobilityManagerName = "lineMobilityManager"
# 
# SN.node[0].MobilityManager.updateInterval = 100
# SN.node[0].MobilityManager.xCoorDestination = 200
# SN.node[0].MobilityManager.yCoorDestination = 200
# SN.node[0].MobilityManager.speed = 15

